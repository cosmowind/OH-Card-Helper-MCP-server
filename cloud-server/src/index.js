import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { CallToolRequestSchema, ListToolsRequestSchema } from "@modelcontextprotocol/sdk/types.js";
import express from 'express';
import {
  whatIsOhCards,
  getOhCardProcess,
  drawOhCard,
  getGuidanceQuestions,
  getAllQuestionTypes,
  getAllCardsPreview
} from './ohcard/tools.js';

// Ëé∑ÂèñÂèÇÊï∞ÁöÑÂ∑•ÂÖ∑ÂáΩÊï∞
function getParamValue(key) {
  return process.env[key.toUpperCase()] || "";
}

// Êó•ÂøóÂäüËÉΩ
function log(level, message, ...args) {
  const timestamp = new Date().toISOString();
  const logLevel = process.env.LOG_LEVEL || 'info';
  const levels = { error: 0, warn: 1, info: 2, debug: 3 };
  
  if (levels[level] <= levels[logLevel]) {
    console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`, ...args);
  }
}

const app = express();
app.use(express.json());

// ËØ∑Ê±ÇÊó•Âøó‰∏≠Èó¥‰ª∂
app.use((req, res, next) => {
  log('debug', `${req.method} ${req.path}`, { 
    userAgent: req.get('User-Agent'),
    ip: req.ip 
  });
  next();
});

// ÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
app.get('/health', (req, res) => {
  const health = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    service: 'ohcard-mcp-cloud',
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    uptime: process.uptime()
  };
  log('debug', 'ÂÅ•Â∫∑Ê£ÄÊü•ËØ∑Ê±Ç', health);
  res.json(health);
});

// ÁÆÄÂçïÁöÑÊµãËØïÁ´ØÁÇπ
app.post('/tools/test_connection', (req, res) => {
  res.json({
    content: [{
      type: "text",
      text: "üéâ ‰∫ëÊúçÂä°Âô®MCPËøûÊé•ÊàêÂäüÔºÅÂü∫Á°ÄHTTP APIÂ∑•‰ΩúÊ≠£Â∏∏„ÄÇ"
    }],
    isError: false
  });
});

// Â∑•ÂÖ∑ÂàóË°®Á´ØÁÇπ
app.get('/tools/list', (req, res) => {
  const tools = {
    tools: [
      {
        name: "what_is_oh_cards",
        description: "‰ªãÁªç‰ªÄ‰πàÊòØOHÂç°",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_oh_card_process",
        description: "Ëé∑ÂèñOHÂç°ÊäΩÂèñÊµÅÁ®ã",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "draw_oh_card",
        description: "ÊäΩÂèñ‰∏ÄÂº†OHÂç°",
        inputSchema: {
          type: "object",
          properties: {
            intention: {
              type: "string",
              description: "Áî®Êà∑ÁöÑÊÑèÂõæÊàñÊÉ≥Ë¶ÅÊé¢Á¥¢ÁöÑÈóÆÈ¢òÔºàÂèØÈÄâÔºâ",
            },
          },
        },
      },
      {
        name: "get_guidance_questions",
        description: "Ëé∑ÂèñÂºïÂØºÈóÆÈ¢òÊù•Â∏ÆÂä©Áî®Êà∑Êé¢Á¥¢Âç°Áâå",
        inputSchema: {
          type: "object",
          properties: {
            question_type: {
              type: "string",
              description: "ÈóÆÈ¢òÁ±ªÂûã (\"ËßÇÂØüÊÑüÂèó\", \"Ê∑±ÂÖ•Êé¢Á¥¢\", \"ÊÉÖÂ¢É‰ª£ÂÖ•\", \"ÂÜÖÂøÉËøûÊé•\", \"ÂêØÂèëË°åÂä®\", \"random\")",
              default: "random",
            },
          },
        },
      },
      {
        name: "get_all_question_types",
        description: "Ëé∑ÂèñÊâÄÊúâÂºïÂØºÈóÆÈ¢òÁ±ªÂûã",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_all_cards_preview",
        description: "Ëé∑ÂèñÊâÄÊúâOHÂç°ÁöÑÈ¢ÑËßà‰ø°ÊÅØÔºà‰ªÖÊòæÁ§∫ÂõæÁâáURLÔºâ",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
    ],
  };
  log('info', 'Â∑•ÂÖ∑ÂàóË°®ËØ∑Ê±Ç', { toolCount: tools.tools.length });
  res.json(tools);
});

// OHÂç°Â∑•ÂÖ∑ÂáΩÊï∞Á´ØÁÇπ
app.post('/tools/what_is_oh_cards', (req, res) => {
  try {
    const result = whatIsOhCards();
    log('info', 'OHÂç°‰ªãÁªçË∞ÉÁî®ÊàêÂäü');
    res.json({
      content: [{
        type: "text",
        text: JSON.stringify(result, null, 2)
      }],
      isError: false
    });
  } catch (error) {
    log('error', 'OHÂç°‰ªãÁªçË∞ÉÁî®Â§±Ë¥•', error);
    res.status(500).json({
      content: [{
        type: "text",
        text: `ÈîôËØØ: ${error.message}`
      }],
      isError: true
    });
  }
});

app.post('/tools/get_oh_card_process', (req, res) => {
  try {
    const result = getOhCardProcess();
    log('info', 'ÊäΩÂç°ÊµÅÁ®ãË∞ÉÁî®ÊàêÂäü');
    res.json({
      content: [{
        type: "text",
        text: JSON.stringify(result, null, 2)
      }],
      isError: false
    });
  } catch (error) {
    log('error', 'ÊäΩÂç°ÊµÅÁ®ãË∞ÉÁî®Â§±Ë¥•', error);
    res.status(500).json({
      content: [{
        type: "text",
        text: `ÈîôËØØ: ${error.message}`
      }],
      isError: true
    });
  }
});

app.post('/tools/draw_oh_card', (req, res) => {
  try {
    const { intention } = req.body.arguments || {};
    const result = drawOhCard(intention);
    log('info', 'ÊäΩÂç°Ë∞ÉÁî®ÊàêÂäü', { cardId: result.card_id, intention });
    res.json({
      content: [{
        type: "text",
        text: JSON.stringify(result, null, 2)
      }],
      isError: false
    });
  } catch (error) {
    log('error', 'ÊäΩÂç°Ë∞ÉÁî®Â§±Ë¥•', error);
    res.status(500).json({
      content: [{
        type: "text",
        text: `ÈîôËØØ: ${error.message}`
      }],
      isError: true
    });
  }
});

app.post('/tools/get_guidance_questions', (req, res) => {
  try {
    const { question_type } = req.body.arguments || {};
    const result = getGuidanceQuestions(question_type);
    log('info', 'ÂºïÂØºÈóÆÈ¢òË∞ÉÁî®ÊàêÂäü', { questionType: result.question_type });
    res.json({
      content: [{
        type: "text",
        text: JSON.stringify(result, null, 2)
      }],
      isError: false
    });
  } catch (error) {
    log('error', 'ÂºïÂØºÈóÆÈ¢òË∞ÉÁî®Â§±Ë¥•', error);
    res.status(500).json({
      content: [{
        type: "text",
        text: `ÈîôËØØ: ${error.message}`
      }],
      isError: true
    });
  }
});

app.post('/tools/get_all_question_types', (req, res) => {
  try {
    const result = getAllQuestionTypes();
    log('info', 'ÈóÆÈ¢òÁ±ªÂûãË∞ÉÁî®ÊàêÂäü');
    res.json({
      content: [{
        type: "text",
        text: JSON.stringify(result, null, 2)
      }],
      isError: false
    });
  } catch (error) {
    log('error', 'ÈóÆÈ¢òÁ±ªÂûãË∞ÉÁî®Â§±Ë¥•', error);
    res.status(500).json({
      content: [{
        type: "text",
        text: `ÈîôËØØ: ${error.message}`
      }],
      isError: true
    });
  }
});

app.post('/tools/get_all_cards_preview', (req, res) => {
  try {
    const result = getAllCardsPreview();
    log('info', 'Âç°ÁâåÈ¢ÑËßàË∞ÉÁî®ÊàêÂäü');
    res.json({
      content: [{
        type: "text",
        text: JSON.stringify(result, null, 2)
      }],
      isError: false
    });
  } catch (error) {
    log('error', 'Âç°ÁâåÈ¢ÑËßàË∞ÉÁî®Â§±Ë¥•', error);
    res.status(500).json({
      content: [{
        type: "text",
        text: `ÈîôËØØ: ${error.message}`
      }],
      isError: true
    });
  }
});

// 404Â§ÑÁêÜ
app.use((req, res) => {
  log('warn', '404ËØ∑Ê±Ç', { path: req.path, method: req.method });
  res.status(404).json({
    error: 'Not Found',
    message: 'ËØ∑‰ΩøÁî® /health, /tools/list ÊàñÊ≠£Á°ÆÁöÑÂ∑•ÂÖ∑Á´ØÁÇπ'
  });
});

// ÈîôËØØÂ§ÑÁêÜ‰∏≠Èó¥‰ª∂
app.use((error, req, res, next) => {
  log('error', 'Êú™Â§ÑÁêÜÁöÑÈîôËØØ', error);
  res.status(500).json({
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'production' ? 'ÊúçÂä°Âô®ÂÜÖÈÉ®ÈîôËØØ' : error.message
  });
});

// ÂàõÂª∫MCPÊúçÂä°Âô®ÂÆû‰æã
const mcpServer = new Server(
  {
    name: "ohcard-mcp-cloud",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Ê≥®ÂÜåÂ∑•ÂÖ∑ÂàóË°®Â§ÑÁêÜÂô®
mcpServer.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "what_is_oh_cards",
        description: "‰ªãÁªç‰ªÄ‰πàÊòØOHÂç°",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_oh_card_process",
        description: "Ëé∑ÂèñOHÂç°ÊäΩÂèñÊµÅÁ®ã",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "draw_oh_card",
        description: "ÊäΩÂèñ‰∏ÄÂº†OHÂç°",
        inputSchema: {
          type: "object",
          properties: {
            intention: {
              type: "string",
              description: "Áî®Êà∑ÁöÑÊÑèÂõæÊàñÊÉ≥Ë¶ÅÊé¢Á¥¢ÁöÑÈóÆÈ¢òÔºàÂèØÈÄâÔºâ",
            },
          },
        },
      },
      {
        name: "get_guidance_questions",
        description: "Ëé∑ÂèñÂºïÂØºÈóÆÈ¢òÊù•Â∏ÆÂä©Áî®Êà∑Êé¢Á¥¢Âç°Áâå",
        inputSchema: {
          type: "object",
          properties: {
            question_type: {
              type: "string",
              description: "ÈóÆÈ¢òÁ±ªÂûã (\"ËßÇÂØüÊÑüÂèó\", \"Ê∑±ÂÖ•Êé¢Á¥¢\", \"ÊÉÖÂ¢É‰ª£ÂÖ•\", \"ÂÜÖÂøÉËøûÊé•\", \"ÂêØÂèëË°åÂä®\", \"random\")",
              default: "random",
            },
          },
        },
      },
      {
        name: "get_all_question_types",
        description: "Ëé∑ÂèñÊâÄÊúâÂºïÂØºÈóÆÈ¢òÁ±ªÂûã",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
      {
        name: "get_all_cards_preview",
        description: "Ëé∑ÂèñÊâÄÊúâOHÂç°ÁöÑÈ¢ÑËßà‰ø°ÊÅØÔºà‰ªÖÊòæÁ§∫ÂõæÁâáURLÔºâ",
        inputSchema: {
          type: "object",
          properties: {},
        },
      },
    ],
  };
});

// Ê≥®ÂÜåÂ∑•ÂÖ∑Ë∞ÉÁî®Â§ÑÁêÜÂô®
mcpServer.setRequestHandler(CallToolRequestSchema, async (request) => {
  try {
    const { name, arguments: args } = request.params;
    
    switch (name) {
      case "what_is_oh_cards": {
        const result = whatIsOhCards();
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      }
      
      case "get_oh_card_process": {
        const result = getOhCardProcess();
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      }
      
      case "draw_oh_card": {
        const { intention } = args || {};
        const result = drawOhCard(intention);
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      }
      
      case "get_guidance_questions": {
        const { question_type } = args || {};
        const result = getGuidanceQuestions(question_type);
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      }
      
      case "get_all_question_types": {
        const result = getAllQuestionTypes();
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      }
      
      case "get_all_cards_preview": {
        const result = getAllCardsPreview();
        return {
          content: [{ type: "text", text: JSON.stringify(result, null, 2) }],
          isError: false,
        };
      }
      
      default:
        throw new Error(`Êú™Áü•ÁöÑÂ∑•ÂÖ∑: ${name}`);
    }
  } catch (error) {
    return {
      content: [
        {
          type: "text",
          text: `ÈîôËØØ: ${error instanceof Error ? error.message : String(error)}`,
        },
      ],
      isError: true,
    };
  }
});

// ÂêØÂä®ÊúçÂä°Âô®
async function startServer() {
  const mode = process.argv[2] || getParamValue("mode") || "rest";
  const port = parseInt(getParamValue("port")) || 9593;
  const env = process.env.NODE_ENV || 'development';
  
  if (mode === "stdio") {
    // stdioÊ®°Âºè - Áî®‰∫éÊú¨Âú∞MCPÂÆ¢Êà∑Á´Ø
    const transport = new StdioServerTransport();
    await mcpServer.connect(transport);
    log('info', "üöÄ OHÂç°MCPÊúçÂä°Âô®ÂêØÂä®ÊàêÂäü (stdioÊ®°Âºè)");
    
  } else if (mode === "rest") {
    // RESTÊ®°Âºè - Áî®‰∫é‰∫ëÁ´ØÈÉ®ÁΩ≤
    const server = app.listen(port, '0.0.0.0', () => {
      log('info', `üöÄ OHÂç°‰∫ëÊúçÂä°Âô®ÂêØÂä®ÊàêÂäüÔºÅ`);
      log('info', `üì° HTTP APIÂú∞ÂùÄ: http://0.0.0.0:${port}`);
      log('info', `üîç ÂÅ•Â∫∑Ê£ÄÊü•: http://0.0.0.0:${port}/health`);
      log('info', `üìã Â∑•ÂÖ∑ÂàóË°®: http://0.0.0.0:${port}/tools/list`);
      log('info', `üåç ËøêË°åÁéØÂ¢É: ${env}`);
      log('info', `üìä Êó•ÂøóÁ∫ßÂà´: ${process.env.LOG_LEVEL || 'info'}`);
      log('info', `\n‚ú® ÂèØÁî®ÁöÑÂ∑•ÂÖ∑Á´ØÁÇπ:`);
      log('info', `  POST /tools/what_is_oh_cards - OHÂç°‰ªãÁªç`);
      log('info', `  POST /tools/get_oh_card_process - ÊäΩÂç°ÊµÅÁ®ã`);
      log('info', `  POST /tools/draw_oh_card - ÊäΩÂèñÂç°Áâå`);
      log('info', `  POST /tools/get_guidance_questions - ÂºïÂØºÈóÆÈ¢ò`);
      log('info', `  POST /tools/get_all_question_types - ÈóÆÈ¢òÁ±ªÂûã`);
      log('info', `  POST /tools/get_all_cards_preview - Âç°ÁâåÈ¢ÑËßà`);
    });
    
    // ‰ºòÈõÖÂÖ≥Èó≠
    const gracefulShutdown = (signal) => {
      log('info', `Êî∂Âà∞ ${signal} ‰ø°Âè∑ÔºåÂºÄÂßã‰ºòÈõÖÂÖ≥Èó≠...`);
      server.close(() => {
        log('info', 'ÊúçÂä°Âô®Â∑≤ÂÖ≥Èó≠');
        process.exit(0);
      });
    };
    
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    
  } else {
    throw new Error(`Êú™Áü•ÁöÑÊ®°Âºè: ${mode}„ÄÇËØ∑‰ΩøÁî® 'stdio' Êàñ 'rest'`);
  }
}

// ÂêØÂä®
startServer().catch((error) => {
  log('error', 'ÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•', error);
  process.exit(1);
}); 